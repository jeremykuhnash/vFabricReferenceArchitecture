<?xml version="1.0" ?>
<!-- Copyright (c) 2013 VMware, Inc. All rights reserved. -->
<project name="devenv-deploy" default="all" basedir="." xmlns:common="uri://vmware.com/common_include/common-macros">
	<echo>loading props from ${basedir}/../springtrader/build.properties</echo> 
	<property file="${basedir}/../springtrader/build.properties" />
	<import file="${basedir}/../common_include/common-deploy.xml" />
	
	<target name="init-props" depends="common-deploy.init-props" >
		<property name="workspace.springtrader" value="${install.dir}/workspace-springtrader" />
		<mkdir dir="${workspace.springtrader}" />
		<property name="novnc.pid.file" value="${temp.dir}/no_vnc.pid" />
		<if>
			<equals arg1="${os-family}" arg2="windows" />
			<then>
				<var name="vnc.enabled" unset="true" />
			</then>
		</if>
		<property file="${basedir}/../sts/install/tcserver.installed" />
		<property name="tcserver.devenv" value="${installed.tcserver.path}/${sts.tcserver.vfra.instance}" />
	</target>
	
	<target name="deploy-noVNC" depends="init,init-props" unless="is.noVNC-deploy.installed" if="${vnc.enabled}">
		<propertyregex property="file.name" 
			input="${novnc.git.archive.url}"
			regexp="(.*)\/(.*)$" 
			select="\2" 
			override="true"
			/>
		<property name="novnc.file" value="${temp.dir}/${file.name}" />
		<delete file="${novnc.file}" failonerror="false"/>
		<echo>Downloading the Web VNC Client... </echo>
		<get src="${novnc.git.archive.url}" dest="${novnc.file}"/>
		<unzip src="${novnc.file}" dest="${install.dir}" overwrite="true"/>	
		<move todir="${install.dir}/noVNC" >
			<fileset dir="${install.dir}/noVNC-master">
				<include name="**/*" />
			</fileset>
		</move>
		<delete dir="${install.dir}/noVNC-master" />
		<copy file="${basedir}/resources/get_novnc_pid.sh" todir="${install.dir}" />
		<chmod perm="ugo+rx" >
			<fileset dir="${install.dir}/noVNC/utils/">
				<include name="**/*"/>
			</fileset>
			<fileset dir="${install.dir}">
				<include name="get_novnc_pid.sh"/>
			</fileset>			
		</chmod>
		<common:set-installed component-name="noVNC" component-version="LATEST" install-path="${install.dir}/noVNC" />
	</target>

	<target name="sts-tcserver-vfra" depends="init-props" unless="is.sts-tcserver-vfra.installed" 
		description="Creates a tc Server instance in the tc Server root directory making it usable from STS.">
		<common:create-tcserver-instance 
			tcserver-root="${installed.tcserver.path}" 
			instance-name="${sts.tcserver.vfra.instance}"
			root-install-path="${installed.tcserver.path}"
			base-template="insight"
			template="${springtrader.tcserver.template}"
			base-jmx-port="${springtrader.tcserver.web.base.jmx.port}"
			bio-http-port="${springtrader.tcserver.web.bio.http.port}" 
			bio-https-port="${springtrader.tcserver.web.bio.https.port}" 
			template-properties-file="${installed.springtrader-template.path}/${springtrader.tcserver.template.properties.file}"
		/>
		<common:set-installed component-name="sts-tcserver-vfra" component-version="LATEST" install-path="${installed.tcserver.path}/${sts.tcserver.vfra.instance}" />	
		<pathconvert targetos="windows" property="installed.sts-tcserver-vfra.path-windows.path" >
			<path location="${installed.sts-tcserver-vfra.path}" />
		</pathconvert>
		<concat destfile="${installed.sts-tcserver-vfra.path}/conf/wrapper.conf" append="true">
			wrapper.pidfile=${installed.sts-tcserver-vfra.path-windows.path}${dir.separator}wrapper.pid${line.separator}
			wrapper.java.pidfile=${installed.sts-tcserver-vfra.path}${dir.separator}wrapper.java.pid
		</concat>
	</target>
	
	<target name="deploy" depends="init, init-props, deploy-noVNC, common-deploy.deploy, sts-tcserver-vfra" unless="is.devenv.installed">
		<copy file="${basedir}/resources/twmrc" tofile="${install.dir}/twmrc" force="true"/>
		<copy file="${basedir}/resources/xstartup-template" tofile="${install.dir}/xstartup-template" force="true"/>		
		<common:set-installed component-name="devenv" component-version="LATEST" install-path="${install.dir}" />
	</target>

	<target name="configure-sts-workspace" depends="init-props" unless="skip.sts.automation" >
		<echo>Configuring Eclipse Workspace for SpringTrader </echo>
		<mkdir dir="${workspace.springtrader}" />
	</target>
	
	<target name="configure-vnc" depends="init-props" if="${vnc.enabled}" >
		<echo>Setting up your VNC environment (~/.vnc) </echo>
		<mkdir dir="${user.home}/.vnc" /> 
		<if>
			<not><available file="${user.home}/.vnc/passwd.orig" /></not>
			<then>
				<echo>****** VNC Server uses the ${user.home}/.vnc/passwd file - saving original to ${user.name}/.vnc/passwd.orig</echo>
				<copy file="${user.home}/.vnc/passwd" tofile="${user.home}/.vnc/passwd.orig" failonerror="false"/>
			</then>
		</if>
		<copy file="${basedir}/resources/passwd" tofile="${user.home}/.vnc/passwd" overwrite="true"/>
		<chmod file="${user.home}/.vnc/passwd" perm="700"/>

		<if>
			<and>
				<not><available file="${user.home}/.vnc/xstartup.orig" /></not>
				<available file="${user.home}/.vnc/xstartup" />
			</and>
			<then>
				<echo>****** VNC Server uses the ${user.home}/.vnc/xstartup file - saving original to ${user.name}/.vnc/xstartup.orig</echo>
				<copy file="${user.home}/.vnc/xstartup" tofile="${user.home}/.vnc/xstartup.orig" />				
			</then>
		</if>
		<copy file="${install.dir}/xstartup-template" toFile="${user.home}/.vnc/xstartup" force="true">
		  <filterset begintoken="%%" endtoken="**">
		    <filter token="TWMRC_FILE" value="${basedir}/install/twmrc" />
		  </filterset>
		</copy>
		<chmod file="${user.home}/.vnc/xstartup" perm="ugo+rx"/>
	</target>

	<target name="configure" depends="init, init-props, configure-sts-workspace, common-deploy.configure" description="" >
		<if>
			<isset property="vnc.enabled" />
			<then>
				<copy file="${basedir}/resources/twmrc" tofile="${install.dir}/twmrc" force="true" />
				<copy file="${basedir}/resources/xstartup-template" tofile="${install.dir}/xstartup-template" force="true" />
			</then>
		</if>
	</target>	
		
	<target name="restore-user-vnc" depends="init-props" if="${vnc.enabled}">
		<echo>****** Restoring ${user.home}/.vnc/xstartup file from ${user.home}/.vnc/xstartup.orig</echo>
		<copy file="${user.home}/.vnc/xstartup.orig" tofile="${user.home}/.vnc/xstartup" failonerror="false" />
		<echo>****** Restoring ${user.home}/.vnc/passwd file from ${user.home}/.vnc/passwd.orig</echo>
		<copy file="${user.home}/.vnc/passwd.orig" tofile="${user.home}/.vnc/passwd" failonerror="false" />
	</target>
	
	<target name="start-vnc" depends="configure-vnc, start-vnc-server, restore-user-vnc" if="${vnc.enabled}" />
	
	<target name="start-vnc-server" depends="init-props, configure-vnc" if="${vnc.enabled}">
		<echo>Starting VNC server... </echo>
		<install-exec executable="vncserver" dir="${installed.devenv.path}" >
			<arg value=":${X.display.number}"/>
			<arg value="-geometry" />
			<arg value="${vnc.geometry}"/>
			<arg value="-depth" />
			<arg value="${vnc.depth}"/>			
		</install-exec>	
	</target>
	
	<target name="start-sts" depends="init-props" description="Runs STS within the VNC session on Linux - will stop when VNC is stopped. Windows must be managed manually." >
		<echo>Starting SpringSource Tool Suite (STS), version ${installed.sts.version} with workspace: ${workspace.springtrader}, DISPLAY = :${X.display.number}.0 </echo>
		<if>
			<equals arg1="${os-family}" arg2="windows" />
			<then>
				<pathconvert targetos="windows" property="windows-workspace" >
					<path location="${workspace.springtrader}" />
				</pathconvert>
				<exec executable="${installed.sts.path}/STS" dir="${installed.sts.path}"  spawn="true" >
					<arg value="-data" />
					<arg value="${windows-workspace}" />
				</exec>
			</then>
			<elseif>
				<equals arg1="${os-family}" arg2="unix" />
				<then>
					<exec executable="${installed.sts.path}/STS" dir="${installed.sts.path}"  spawn="true" >
						<arg value="-data" />
						<arg value="${workspace.springtrader}" />
						<env key="DISPLAY" value=":${X.display.number}.0" />
					</exec>
				</then>
			</elseif>
		</if>	
	</target>
	
	<target name="start-noVNC-service" depends="init-props" if="vnc.enabled">
		<echo>Access the remote desktop by opening a browser to ${novnc.url} (or, replace localhost with the IP of this server if remote).</echo>
		<echo> Press CTRL-C in this console to stop the remote access service.</echo>
		<exec executable="${install.dir}/noVNC/utils/websockify" dir="${install.dir}/noVNC" spawn="false">
			<arg value="--web" />
			<arg value="./." />
			<arg value="${novnc.port}" />
			<arg value="localhost:59${X.display.number}" />
		</exec>
	</target>
	
	<target name="save-noVNC-pid" depends="init-props" if="vnc.enabled" >
		<var name="novnc.pid" unset="true" />
		<exec executable="${install.dir}/get_novnc_pid.sh" dir="${install.dir}" outputproperty="novnc.pid" />
		<propertyfile file="${novnc.pid.file}" >
			<entry key="novnc.pid" value="${novnc.pid}" />
		</propertyfile>	
	</target>
	
	<target name="start-noVNC" depends="init-props, start-noVNC-service, save-noVNC-pid" if="vnc.enabled" >
	</target>
	
	<target name="start-springtrader-browser" depends="init-props" >
		<if>
			<equals arg1="${os-family}" arg2="windows" />
			<then>
				<echo>Opening URL for vFabric SpringTrader @  ${springtrader.url} </echo>
				<exec failonerror="true" dir="${install.dir}" executable="${basedir}/resources/start_browser.bat">
						<arg value="${springtrader.url}" />
				</exec>
				<sleep seconds="5" />
				<echo>Opening URL for RabbitMQ @  ${rabbitmq.management.url} </echo>
				<exec failonerror="true" dir="${install.dir}" executable="${basedir}/resources/start_browser.bat">
						<arg value="${rabbitmq.management.url}" />
				</exec>
				<sleep seconds="5" />
				<echo>Opening URL for Insight @  ${rabbitmq.management.url} </echo>
				<exec failonerror="true" dir="${install.dir}" executable="${basedir}/resources/start_browser.bat">
						<arg value="${insight.url}" />
				</exec>
			</then>
			<elseif>
				<and>
					<equals arg1="${os-family}" arg2="unix" />
					<not><equals arg1="${isOSX}" arg2="true" /></not>
				</and>
				<then>
					<echo>Opening URL for vFabric SpringTrader @  ${springtrader.url} </echo>
					<exec executable="firefox" spawn="true" >
						<arg value="-new-tab" />
						<arg value="${springtrader.url}" />
						<env key="DISPLAY" value=":${X.display.number}.0" />
					</exec>
					<sleep seconds="5" />
					<echo>Opening URL for RabbitMQ @  ${rabbitmq.management.url} </echo>
					<exec executable="firefox" spawn="true" >
						<arg value="-new-tab" />
						<arg value="${rabbitmq.management.url}" />
						<env key="DISPLAY" value=":${X.display.number}.0" />
					</exec>
					<sleep seconds="5" />
					<echo>Opening URL for Insight @  ${insight.url} </echo>
					<exec executable="firefox" spawn="true" >
						<arg value="-new-tab" />
						<arg value="${insight.url}" />
						<env key="DISPLAY" value=":${X.display.number}.0" />
					</exec>
				</then>				
			</elseif>
			<elseif>
				<equals arg1="${isOSX}" arg2="true" />
				<then>
					<echo>Opening URL for vFabric SpringTrader @  ${springtrader.url} </echo>
					<exec executable="open" spawn="true" >
						<arg value="${springtrader.url}" />
					</exec>
					<sleep seconds="5" />
					<echo>Opening URL for RabbitMQ @  ${rabbitmq.management.url} </echo>
					<exec executable="open" spawn="true" >
						<arg value="${rabbitmq.management.url}" />
					</exec>
					<sleep seconds="5" />
					<echo>Opening URL for Insight @  ${insight.url} </echo>
					<exec executable="open" spawn="true" >
						<arg value="${insight.url}" />
					</exec>
				</then>				
			</elseif>
		</if>
	</target>
	
	<target name="start" depends="init, init-props, start-vnc, start-sts, start-springtrader-browser, start-noVNC, common-deploy.start" description="Full startup lifecycle." >
	</target>
	
	<target name="deploy-tests" depends="init-props"  >
		<common:user-log URL="https://github.com/vFabric/springtrader/wiki/Getting-Started-Guide#wiki-lin-deploy" />
		<property name="tools.lib" value="${install.dir}/springtrader/tools/build/libs" />
		<unzip dest="${datagen.dir}" src="${tools.lib}/DataGenerator.zip" />	
		<common:set-installed component-name="datagen" component-version="LATEST" install-path="${temp.dir}/datagen" />
	</target>

	<target name="stop-vnc" depends="init,init-props,common-deploy.stop" if="vnc.enabled" >
		<install-exec executable="vncserver" dir="${installed.sts.path}" failonerror="false" >
			<arg value="-kill"/>
			<arg value=":${X.display.number}"/>
		</install-exec>
		<property file="${novnc.pid.file}" />
		<install-exec executable="kill" failonerror="false" >
			<arg value="${novnc.pid}" />
		</install-exec>	
	</target>
	
	<target name="stop" depends="init, init-props, stop-vnc, common-deploy.stop" >
		<echo>You may have to stop STS and close any browser views manually.</echo>
	</target>
	
	<target name="clean" depends="stop, common-deploy.clean" >
		<delete dir="${tcserver.devenv}" />
	</target>
</project>